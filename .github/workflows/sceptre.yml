# Builds, tests and create docker image
# TODO: GD artificatory
#
# Requirements:
# - An initialized npm project with tests
#
# Example values:
# "version": "1.0.1",
# "scripts": {
#     "test": "mocha test.js"
# },
#

name: Update AWS Infrastructure

on:
  workflow_dispatch:
  push:
    branches: [main, develop]
    paths:
      - "sceptre/**"
      - ".github/workflows/sceptre.yml"

jobs:
  tartufo-code-secrets-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # Checkout this repository
      - name: Checkout GoDaddy Actions repo # Checkout shared actions repository gd-actions
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
        with:
          repository: gdcorp-cp/gd-actions
          token: ${{ secrets.REPO_CLONE_TOKEN_SA_PAT }} # PAT with read access to gdcorp-cp/gd-actions
          path: gd-actions # Relative to github working directory
          persist-credentials: false
      - uses: ./gd-actions/tartufo # Relative reference to action in gd-actions repository
        with:
          github_token: ${{ secrets.REPO_CLONE_TOKEN_SA_PAT }}

  checkout-code:
    runs-on: self-hosted
    needs: tartufo-code-secrets-scan
    steps:
      - name: Checkout this repo on to a job runner.
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # Checkout this repository.

  deploy-fargate-infrastructure:
    runs-on: self-hosted
    needs: checkout-code
    steps:
      - name: Set params for development env
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "AWS_DEPLOY_SECRET_ACCESS_KEY_ID=${{ secrets.DEV_AWS_SECRET_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_DEPLOY_SECRET_TOKEN_VALUE=${{ secrets.DEV_AWS_SECRET_TOKEN_VALUE }}" >> $GITHUB_ENV
          echo "AWS_DEPLOY_ROLE=${{ secrets.DEV_AWS_DEPLOY_ROLE }}" >> $GITHUB_ENV
          echo "AWS_CLUSTER_SSL_CERT_ID=6b8fa223-fcb8-4b58-b06e-49ee814098d0" >> $GITHUB_ENV
          echo "NODE_ENV=development" >> $GITHUB_ENV
          echo "GD_ROOT_DOMAIN=dev-gdcorp.tools" >> $GITHUB_ENV

      - name: Set params for production env
        if: github.ref == 'refs/heads/main'
        run: |
          echo "AWS_DEPLOY_SECRET_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_DEPLOY_SECRET_TOKEN_VALUE=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_DEPLOY_ROLE=${{ secrets.PROD_AWS_DEPLOY_ROLE }}" >> $GITHUB_ENV
          echo "AWS_CLUSTER_SSL_CERT_ID=0ed4b93f-b7ad-4dba-9102-572cf48cc9ad" >> $GITHUB_ENV
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "GD_ROOT_DOMAIN=gdcorp.tools" >> $GITHUB_ENV

      - name: Configure AWS credentials using Cloud Key Based Service Accounts
        uses: aws-actions/configure-aws-credentials@ea7b857d8a33dc2fb4ef5a724500044281b49a5e
        with:
          aws-access-key-id: ${{ env.AWS_DEPLOY_SECRET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_DEPLOY_SECRET_TOKEN_VALUE }}
          role-to-assume: ${{ env.AWS_DEPLOY_ROLE }}
          role-duration-seconds: 3600
          aws-region: us-west-2

      - name: Deploy / Update ECR sceptre deployment
        working-directory: ./sceptre
        env:
          AWS_CLUSTER_SSL_CERT_ID: ${{env.AWS_CLUSTER_SSL_CERT_ID}}
          NODE_ENV: ${{env.NODE_ENV}}
          GD_ROOT_DOMAIN: ${{env.GD_ROOT_DOMAIN}}
        run: |
          export
          sceptre launch -y dev/us-west-2/threat-ui-tenet/ecr.yaml
          sceptre launch -y dev/us-west-2/threat-ui-tenet/iam-role.yaml
          sceptre launch -y dev/us-west-2/threat-ui-tenet/fargate-cluster.yaml
          sceptre launch -y dev/us-west-2/threat-ui-tenet/fargate-service.yaml
          sceptre launch -y dev/us-west-2/threat-ui-tenet/sns-moog.yaml
          sceptre launch -y dev/us-west-2/threat-ui-tenet/cloudwatch-alarm.yaml
