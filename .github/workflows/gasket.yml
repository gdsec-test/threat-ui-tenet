name: docker test

on:
  pull_request:
    branches: [main]
    paths:
      - "app/**"
      - "Dockerfile"
  push:
    branches: [main]
    paths:
      - "app/**"
      - "Dockerfile"

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/setup-node@c46424e
        with:
          node-version: 12

      - name: Checkout this repo on to a job runner.
        uses: actions/checkout@5a4ac90 # Checkout this repository.

      - name: Configure AWS credentials using Cloud Key Based Service Accounts
        uses: aws-actions/configure-aws-credentials@1417e62
        with:
          aws-access-key-id: ${{ secrets.DEV_PRIVATE_AWS_ACCESS_KEY_ID_TEST }}
          aws-secret-access-key: ${{ secrets.DEV_PRIVATE_AWS_SECRET_KEY_TEST }}
          role-to-assume: ${{ secrets.DEV_PRIVATE_DEPLOY_ROLE_TEST }}
          role-duration-seconds: 3600
          aws-region: us-west-2

      - name: Print caller-identity
        run: aws sts get-caller-identity

      - name: Copy artificatory token into .npmrc
        working-directory: app
        run: |
          echo ${{ secrets.NPM_ARTIFACTORY_TOKEN }} >> .npmrc

      - name: Install node_modules
        working-directory: app
        run: |
          npm i
          npm run build
          npm prune --production

      - name: Log into golden image ECR
        run: |
          aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 764525110978.dkr.ecr.us-west-2.amazonaws.com

      - name: Build container
        id: container
        run: |
          docker build . -t tmp
          echo "::set-output name=id::$(docker images -q tmp)"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@337a919

      - name: Deploy image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: com.godaddy.threat-ui-tenet
        run: |
          docker tag ${{ steps.container.outputs.id }} $ECR_REGISTRY/$ECR_REPOSITORY
          docker push $ECR_REGISTRY/$ECR_REPOSITORY
          aws ecs update-service --cluster threat-ui-tenet-cluster --service threat-ui-tenet-fargate --force-new-deployment --region us-west-2
