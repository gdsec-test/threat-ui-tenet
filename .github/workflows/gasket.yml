name: Deploy New Build

on:
  pull_request:
    branches: [main]
    paths:
      - "app/**"
      - "Dockerfile"
  push:
    branches: [main]
    paths:
      - "app/**"
      - "Dockerfile"

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/setup-node@05f0551dbd620d7be8d92f9f7c1674ebf6bcb0eb
        with:
          node-version: 12

      - name: Checkout this repo on to a job runner.
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # Checkout this repository.

      - name: Install node modules for root folder
        run: |
          npm i

      - name: Configure AWS credentials using Cloud Key Based Service Accounts
        uses: aws-actions/configure-aws-credentials@9ea63e0c1c3b71af4bf6de1d7e251d3756673ed2
        with:
          aws-access-key-id: ${{ secrets.DEV_PRIVATE_AWS_ACCESS_KEY_ID_TEST }}
          aws-secret-access-key: ${{ secrets.DEV_PRIVATE_AWS_SECRET_KEY_TEST }}
          role-to-assume: ${{ secrets.DEV_PRIVATE_DEPLOY_ROLE_TEST }}
          role-duration-seconds: 3600
          aws-region: us-west-2

      - name: Copy artificatory token into .npmrc
        working-directory: app
        run: |
          echo ${{ secrets.NPM_ARTIFACTORY_TOKEN }} >> .npmrc

      - name: Install node modules
        working-directory: app
        run: |
          npm i
          export $(grep -v '^#' ../.varenv | xargs) && npm prune

      - name: Build application code (also generate self-signed SSL certs)
        working-directory: app
        run: |
          export $(grep -v '^#' ../.varenv | xargs) && npm run createcert
          npm run build

      - name: Log into golden image ECR
        run: |
          aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 764525110978.dkr.ecr.us-west-2.amazonaws.com

      - name: Build docker container
        id: container
        run: |
          export $(grep -v '^#' .varenv | xargs) && docker build --build-arg NODE_ENV=$NODE_ENV -t tmp . | while read line ; do echo "$(date)| $line"; done;
          echo "::set-output name=id::$(docker images -q tmp)"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@a3b1dc9bc1598017eaab0d7f39725589b0bfb68b

      - name: Deploy image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: com.godaddy.threat-ui-tenet
        run: |
          docker tag ${{ steps.container.outputs.id }} $ECR_REGISTRY/$ECR_REPOSITORY
          docker push $ECR_REGISTRY/$ECR_REPOSITORY
          aws ecs update-service --cluster threat-ui-tenet-cluster --service threat-ui-tenet-fargate --force-new-deployment --region us-west-2
