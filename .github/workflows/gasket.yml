name: Deploy New Build

on:
  push:
    branches: [main]
    paths:
      - "app/**"
      - "Dockerfile"
      - ".varenv"
      - ".github/workflows/gasket.yml"

jobs:
  deploy:
    env:
      ECR_REPOSITORY: com.godaddy.threat-ui-tenet
    runs-on: self-hosted
    steps:
      - name: Set env variables for deployment
        id: set_vars
        run: |
          export $(grep -v '^#' .varenv | xargs)
          echo ::set-output name=NODE_ENV::${NODE_ENV}
          echo ::set-output name=GD_ROOT_DOMAIN::${GD_ROOT_DOMAIN}

      - name: Set params for development env
        if: steps.set_vars.outputs.NODE_ENV == 'development'
        run: |
          echo "AWS_DEPLOY_SECRET_ACCESS_KEY_ID=${{ secrets.DEV_AWS_SECRET_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_DEPLOY_SECRET_TOKEN_VALUE=${{ secrets.DEV_AWS_SECRET_TOKEN_VALUE }}" >> $GITHUB_ENV
          echo "AWS_DEPLOY_ROLE=${{ secrets.DEV_AWS_DEPLOY_ROLE }}" >> $GITHUB_ENV
          echo "AWS_CLUSTER_SSL_CERT_ID=6b8fa223-fcb8-4b58-b06e-49ee814098d0" >> $GITHUB_ENV

      - name: Set params for production env
        if: steps.set_vars.outputs.NODE_ENV == 'production'
        run: |
          echo "AWS_DEPLOY_SECRET_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_DEPLOY_SECRET_TOKEN_VALUE=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_DEPLOY_ROLE=${{ secrets.PROD_AWS_DEPLOY_ROLE }}" >> $GITHUB_ENV
          echo "AWS_CLUSTER_SSL_CERT_ID=0ed4b93f-b7ad-4dba-9102-572cf48cc9ad" >> $GITHUB_ENV

      - uses: actions/setup-node@05f0551dbd620d7be8d92f9f7c1674ebf6bcb0eb
        with:
          node-version: 12

      - name: Checkout this repo on to a job runner.
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # Checkout this repository.

      - name: Install node modules for root folder
        run: |
          npm i

      - name: Configure AWS credentials using Cloud Key Based Service Accounts
        uses: aws-actions/configure-aws-credentials@1ed6eed14f0f832cad5830fb357d937c2f20ec67
        with:
          aws-access-key-id: ${{ env.AWS_DEPLOY_SECRET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_DEPLOY_SECRET_TOKEN_VALUE }}
          role-to-assume: ${{ env.AWS_DEPLOY_ROLE }}
          role-duration-seconds: 3600
          aws-region: us-west-2

      - name: Copy artificatory token into .npmrc
        working-directory: app
        run: |
          echo ${{ secrets.NPM_ARTIFACTORY_TOKEN }} >> .npmrc

      - name: Log into golden image ECR
        run: |
          aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 764525110978.dkr.ecr.us-west-2.amazonaws.com

      - name: Build docker container
        id: container
        run: |
          echo $NODE_ENV
          export $(grep -v '^#' .varenv | xargs) && docker build --build-arg NODE_ENV=$NODE_ENV -t tmp . | while read line ; do echo "$(date)| $line"; done;
          echo "::set-output name=id::$(docker images -q tmp)"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@a3b1dc9bc1598017eaab0d7f39725589b0bfb68b

      - name: Tag image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag ${{ steps.container.outputs.id }} $ECR_REGISTRY/$ECR_REPOSITORY

      # - name: Checkout GitHub Action for Scan Image
      #   uses: actions/checkout@v2
      #   with:
      #     repository: gdcorp-actions/container-scan
      #     ref: main
      #     token: ${{ secrets.SCANNER_ACTION_PAT_TOKEN }}
      #     path: .github/actions/container-scan

      # - name: Scan Image For Vulnerabilities
      #   continue-on-error: true
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #   uses: ./.github/actions/container-scan
      #   with:
      #     container-name: ${{ env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY}}:latest
      #     SCANNER_GOLDEN_AWS_SECRET_ACCESS_KEY_ID: ${{secrets.SCANNER_GOLDEN_AWS_SECRET_ACCESS_KEY_ID}}
      #     SCANNER_GOLDEN_AWS_SECRET_TOKEN_VALUE: ${{secrets.SCANNER_GOLDEN_AWS_SECRET_TOKEN_VALUE}}

      # - name: Post status
      #   uses: actions/github-script@v3
      #   with:
      #     github-token: ${{github.token}}
      #     script: |
      #       const { statuses = [] } = await github.request('GET /repos/' + context.repo.owner + '/' + context.repo.repo + '/commits/' + context.sha + '/status', {
      #         ref: context.sha,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo
      #       });
      #       const fail = statuses.find(({state}) => state === 'failure');
      #       if (fail) {
      #         github.request('POST /repos/' + context.repo.owner + '/' + context.repo.repo + '/statuses/' + context.sha, {
      #           sha: context.sha,
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           state: 'failure',
      #           context:  'prod/CirrusScan',
      #           description:   fail.description,
      #           target_url: 'https://github.com/' + context.repo.owner + '/' + context.repo.repo + '/runs/' + context.runNumber
      #         });
      #       }

      - name: Deploy image to ECR and Update ECS Fargate Cluster with new image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY
          aws ecs update-service --cluster threat-ui-tenet-cluster --service threat-ui-tenet-fargate --force-new-deployment --region us-west-2
