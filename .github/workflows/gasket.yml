name: Deploy New Build

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    branches: [main, develop]
    paths:
      - "app/**"
      - "Dockerfile"
      - ".github/workflows/gasket.yml"

jobs:
  deploy:
    env:
      ECR_REPOSITORY: com.godaddy.threat-ui-tenet
    runs-on: self-hosted
    steps:
      - name: Set params for development env
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "AWS_DEPLOY_SECRET_ACCESS_KEY_ID=${{ secrets.DEV_AWS_SECRET_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_DEPLOY_SECRET_TOKEN_VALUE=${{ secrets.DEV_AWS_SECRET_TOKEN_VALUE }}" >> $GITHUB_ENV
          echo "AWS_DEPLOY_ROLE=${{ secrets.DEV_AWS_DEPLOY_ROLE }}" >> $GITHUB_ENV
          echo "AWS_CLUSTER_SSL_CERT_ID=1b3a1268-3aec-4cd0-8204-4b07209e32fa" >> $GITHUB_ENV
          echo "NODE_ENV=development" >> $GITHUB_ENV
          echo "GD_ROOT_DOMAIN=dev-gdcorp.tools" >> $GITHUB_ENV

      - name: Set params for production env
        if: github.ref == 'refs/heads/main'
        run: |
          echo "AWS_DEPLOY_SECRET_ACCESS_KEY_ID=${{ secrets.PROD_AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_DEPLOY_SECRET_TOKEN_VALUE=${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_DEPLOY_ROLE=${{ secrets.PROD_AWS_DEPLOY_ROLE }}" >> $GITHUB_ENV
          echo "AWS_CLUSTER_SSL_CERT_ID=2d98481c-771c-4e6a-be56-c85a9941a40b" >> $GITHUB_ENV
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "GD_ROOT_DOMAIN=gdcorp.tools" >> $GITHUB_ENV

      - uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516
        with:
          node-version: 14.19.0

      - name: Checkout this repo on to a job runner.
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # Checkout this repository.

      - name: Copy artificatory token into .npmrc
        run: |
          echo ${{ secrets.NPM_ARTIFACTORY_TOKEN }} >> .npmrc
          echo ${{ secrets.NPM_ARTIFACTORY_TOKEN }} >> app/.npmrc

      - name: Install node modules for root folder
        run: |
          npm i --production=false

      - name: Configure AWS credentials using Cloud Key Based Service Accounts
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          aws-access-key-id: ${{ env.AWS_DEPLOY_SECRET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_DEPLOY_SECRET_TOKEN_VALUE }}
          role-to-assume: ${{ env.AWS_DEPLOY_ROLE }}
          role-duration-seconds: 3600
          aws-region: us-west-2

      - name: Log into golden image ECR
        run: |
          aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 764525110978.dkr.ecr.us-west-2.amazonaws.com

      - name: Build docker container
        id: container
        run: |
          . app/get-forensic-creds.sh
          docker build --progress=tty --build-arg FORENSIC_USER_CREDS --build-arg NODE_ENV=${{ env.NODE_ENV }} --build-arg GD_ROOT_DOMAIN=${{ env.GD_ROOT_DOMAIN }} -t tmp . | while read line ; do echo "$(date)| $line"; done;
          echo "::set-output name=id::$(docker images -q tmp)"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076

      - name: Tag image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag ${{ steps.container.outputs.id }} $ECR_REGISTRY/$ECR_REPOSITORY

      - name: Configure AWS credentials using Cloud Key Based Service Accounts
        uses: aws-actions/configure-aws-credentials@67fbcbb121271f7775d2e7715933280b06314838
        with:
          aws-access-key-id: ${{ env.PROD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PROD_AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ env.PROD_AWS_DEPLOY_ROLE }}
          role-duration-seconds: 3600
          aws-region: us-west-2

      - name: Checkout GitHub Action for Scan Image
        uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8
        with:
          repository: gdcorp-actions/container-scan
          ref: main
          token: ${{ secrets.SCANNER_ACTION_PAT_TOKEN }}  # ask for this PAT, it is needed to checkout code for scanning
          path: .github/actions/container-scan


      - name: Scan Images For Vulnerabilities
        continue-on-error: true
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        uses: ./.github/actions/container-scan
        with:
          container-name: ${{ env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY}}
          aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
          aws-session-token: ${{env.AWS_SESSION_TOKEN}}
          aws-default-region: us-west-2

      - name: Deploy image to ECR and Update ECS Fargate Cluster with new image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY
          aws ecs update-service --cluster threat-ui-tenet-cluster --service threat-ui-tenet-fargate-service --force-new-deployment --region us-west-2
